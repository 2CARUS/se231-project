/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package encryptionproject.UIpackage;

import encryptionproject.Facade;
import java.awt.event.KeyEvent;
import org.json.JSONObject;

/**
 *
 * @author ckopp
 */
public class DecryptionUI extends UIFrame {

    /**
     * Creates new form AesDecryptionUI
     */
    public DecryptionUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titleLabel = new javax.swing.JLabel();
        decButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();
        subtitle1Label = new javax.swing.JLabel();
        editorScrollPane = new javax.swing.JScrollPane();
        plaintextEditorPane = new javax.swing.JEditorPane();
        subtitle2Label = new javax.swing.JLabel();
        aesPasswordField = new javax.swing.JPasswordField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        titleLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        titleLabel.setText("AES Decryption");

        decButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        decButton.setText("<html>\nExecute <br/> Decryption\n</html>");
        decButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decButtonActionPerformed(evt);
            }
        });
        decButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                decButtonKeyPressed(evt);
            }
        });

        backButton.setText("< Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        subtitle1Label.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        subtitle1Label.setText("Please enter the text you wish to decrypt");

        plaintextEditorPane.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        editorScrollPane.setViewportView(plaintextEditorPane);

        subtitle2Label.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        subtitle2Label.setText("Please enter the key phrase that will be used for decryption");

        aesPasswordField.setText("password123");
        aesPasswordField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aesPasswordFieldActionPerformed(evt);
            }
        });
        aesPasswordField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                aesPasswordFieldKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(titleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(backButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(decButton, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(editorScrollPane, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(subtitle1Label, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                    .addComponent(aesPasswordField)
                    .addComponent(subtitle2Label, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titleLabel)
                .addGap(18, 18, 18)
                .addComponent(subtitle1Label)
                .addGap(18, 18, 18)
                .addComponent(editorScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(subtitle2Label)
                .addGap(18, 18, 18)
                .addComponent(aesPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(decButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(backButton, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void decButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decButtonActionPerformed
        // TODO add your handling code here:
        this.startDecryption();
    }//GEN-LAST:event_decButtonActionPerformed

    private void decButtonKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_decButtonKeyPressed
        // TODO add your handling code here:

    }//GEN-LAST:event_decButtonKeyPressed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // TODO add your handling code here:
        UIController.getInstance().displayNextFrame(this, new MainMenuUI());
    }//GEN-LAST:event_backButtonActionPerformed

    private void aesPasswordFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aesPasswordFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_aesPasswordFieldActionPerformed

    private void aesPasswordFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_aesPasswordFieldKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            this.startDecryption();
        }
    }//GEN-LAST:event_aesPasswordFieldKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DecryptionUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DecryptionUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DecryptionUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DecryptionUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DecryptionUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPasswordField aesPasswordField;
    private javax.swing.JButton backButton;
    private javax.swing.JButton decButton;
    private javax.swing.JScrollPane editorScrollPane;
    private javax.swing.JEditorPane plaintextEditorPane;
    private javax.swing.JLabel subtitle1Label;
    private javax.swing.JLabel subtitle2Label;
    private javax.swing.JLabel titleLabel;
    // End of variables declaration//GEN-END:variables

    /**
     * Starts the decryption
     *
     * if successful, then it sends this off to the OutputForm
     */
    private void startDecryption() {
        String ciphertext = this.plaintextEditorPane.getText();
        String password = new String(this.aesPasswordField.getPassword());

        JSONObject result = Facade.instance().startDecryption(ciphertext, password);

        if ((boolean) (result.get("successfulDecryption"))) {
            OutputFormUI next = new OutputFormUI();
            next.setResult(result);
            UIController.getInstance().displayNextFrame(this, next);
        } else {
            Popup.popupMessage("The decryption failed. Please try again");
        }
    }
}
